project: demo-project
environments:
- name: testing
  access: access_testing # 环境的账号
  region: cn-hangzhou
  description: 'testing environment'
  type: 'testing' # 环境类别
  
  # 环境使用的角色，使用该角色访问环境下的所有资源
  role: acs:ram::${config(AccountID)}:role/serverlessdevsinfra-testing
  
  # 可选：环境角色的绑定策略
  policy: 
    customPolicyStatements:
      - Effect: Allow
        Action:
        - vpc:CreateVpc
        - vpc:CreateVSwitch
        - vpc:DeleteVpc
        - vpc:DeleteVSwitch
        - vpc:ModifyVpcAttribute
        - vpc:ModifyVSwitchAttribute
        Resource: "*"
      - Effect: Allow
        Action:
        - ecs:CreateSecurityGroup
        - ecs:ModifySecurityGroupAttribute
        - ecs:ModifySecurityGroupRule
        - ecs:ModifySecurityGroupPolicy
        - ecs:ModifySecurityGroupEgressRule
        - ecs:DeleteSecurityGroup
        - ecs:AuthorizeSecurityGroup
        - ecs:AuthorizeSecurityGroupEgress
        - ecs:RevokeSecurityGroup
        - ecs:RevokeSecurityGroupEgress
        Resource: "*"
      - Effect: Allow
        Action:
        - nas:CreateMountTarget
        - nas:ModifyMountTarget
        - nas:CreateFileSystem
        - nas:ModifyFileSystem
        - nas:CreateAccessGroup
        - nas:CreateAccessRule
        - nas:ModifyAccessGroup
        - nas:ModifyAccessRule
        - nas:DeleteAccessGroup
        - nas:DeleteAccessRule
        - nas:DeleteFileSystem
        - nas:DeleteMountTarget
        Resource: "*"
      - Effect: Allow
        Action:
        - fc:GetAccountSettings
        Resource: "*"
    systemPolices:
      - AliyunFCDefaultRolePolicy
      - AliyunECSReadOnlyAccess
      - AliyunVPCReadOnlyAccess
      - AliyunNASReadOnlyAccess

  # 可选：通过环境管理基础设施堆栈
  infraStack: 
    # 指定IaC模板
    template: 
      engine: terraform # 使用Terraform部署基础设施资源
      code: | # IaC代码
        resource "random_id" "this" {
          byte_length = 8
        }
        locals {
          default_description  = "Auto created by serverless application center."
          default_name_suffix  = random_id.this.hex
          default_name         = "${var.namePrefix}-${local.default_name_suffix}"
          default_vpc_cdir     = "192.168.0.0/16"
          default_vswitch_cdir = "192.168.1.0/24"
        }

        data "alicloud_fc_zones" "fc-zone" {}

        resource "alicloud_vpc" "vpc" {
          count = var.needVPC ? 1 : 0
          vpc_name    = local.default_name
          cidr_block  = "192.168.0.0/16"
          description = local.default_description
        }

        resource "alicloud_vswitch" "vsw" {
          count = var.needVPC ? 1 : 0
          vpc_id       = alicloud_vpc.vpc.0.id
          vswitch_name = local.default_name
          cidr_block   = "192.168.1.0/24"
          zone_id      = data.alicloud_fc_zones.fc-zone.ids.0
          description  = local.default_description
        }

        resource "alicloud_security_group" "sg" {
          count = var.needVPC ? 1 : 0
          name        = local.default_name
          description = local.default_description
          vpc_id      = alicloud_vpc.vpc.0.id
        }

        locals {
          ingress_with_cidr_blocks = [
            {
              from_port  = -1
              to_port    = -1
              protocol   = "all"
              cidr_block = "192.168.0.0/16"
              priority   = 100
            },
            {
              from_port  = -1
              to_port    = -1
              protocol   = "icmp"
              cidr_block = "0.0.0.0/0"
              priority   = 100
            },
            {
              from_port  = 443
              to_port    = 443
              protocol   = "tcp"
              cidr_block = "0.0.0.0/0"
              priority   = 100
            },
            {
              from_port  = 80
              to_port    = 80
              protocol   = "tcp"
              cidr_block = "0.0.0.0/0"
              priority   = 100
            },
          ]
        }

        resource "alicloud_security_group_rule" "sg_rule" {
          count             = var.needVPC ? length(local.ingress_with_cidr_blocks) : 0
          security_group_id = alicloud_security_group.sg.0.id

          type        = "ingress"
          ip_protocol = local.ingress_with_cidr_blocks[count.index].protocol
          nic_type    = "intranet"
          port_range  = "${local.ingress_with_cidr_blocks[count.index].from_port}/${local.ingress_with_cidr_blocks[count.index].to_port}"
          cidr_ip     = local.ingress_with_cidr_blocks[count.index].cidr_block
          priority    = local.ingress_with_cidr_blocks[count.index].priority
          description = local.default_description
        }

        resource "alicloud_log_project" "project" {
          count       = var.needSLS ? 1 : 0
          name        = local.default_name
          description = local.default_description
        }

        resource "alicloud_log_store" "store" {
          count                 = var.needSLS ? 1 : 0
          project               = alicloud_log_project.project.0.name
          name                  = local.default_name
          shard_count           = 1
          auto_split            = true
          max_split_shard_count = 60
          append_meta           = true
        }

        locals {
          sls_default_token = <<EOT
        , '";=()[]{}?@&<>/:\n\t\r
          EOT

          index_field_search = [
            {
              name             = "serviceName"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "functionName"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "qualifier"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "versionId"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "isColdStart"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "hasFunctionError"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "errorType"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "hostname"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "instanceID"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "ipAddress"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "aggPeriodSeconds"
              type             = "long"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "concurrentRequests"
              type             = "long"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "cpuPercent"
              type             = "double"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "cpuQuotaPercent"
              type             = "double"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "memoryLimitMB"
              type             = "double"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "memoryUsagePercent"
              type             = "double"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "operation"
              type             = "text"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "rxBytes"
              type             = "long"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "rxTotalBytes"
              type             = "long"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "txBytes"
              type             = "long"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
            {
              name             = "txTotalBytes"
              type             = "long"
              case_sensitive   = false
              include_chinese  = false
              token            = local.sls_default_token
              enable_analytics = true
            },
          ]
        }

        resource "alicloud_log_store_index" "index" {
          count       = var.needSLS ? 1 : 0
          project  = alicloud_log_project.project.0.name
          logstore = alicloud_log_store.store.0.name

          full_text {
            case_sensitive = false
            chinese = false
            token = local.sls_default_token
          }
          dynamic "field_search" {
            for_each = local.index_field_search
            content {
              name             = field_search.value.name
              type             = lookup(field_search.value, "type", "long")
              alias            = lookup(field_search.value, "alias", null)
              case_sensitive   = lookup(field_search.value, "case_sensitive", false)
              include_chinese  = lookup(field_search.value, "include_chinese", false)
              token            = lookup(field_search.value, "token", null)
              enable_analytics = lookup(field_search.value, "enable_analytics", true)
              dynamic "json_keys" {
                for_each = lookup(field_search.value, "json_keys", [])
                content {
                  name      = json_keys.value.name
                  type      = lookup(json_keys.value, "type", "long")
                  alias     = lookup(json_keys.value, "alias", null)
                  doc_value = lookup(json_keys.value, "doc_value", true)
                }
              }
            }
          }
        }

        resource "alicloud_oss_bucket" "bucket" {
          count           = var.needOSS ? 1 : 0
          bucket          = local.default_name
          acl             = "private"
          storage_class   = "Standard"
          redundancy_type = "LRS"
        }

        resource "alicloud_nas_file_system" "nas_fs" {
          count         = var.needVPC && var.needNAS ? 1 : 0
          protocol_type = "NFS"
          storage_type  = "Capacity"
        }

        resource "alicloud_nas_access_group" "nas_ag" {
          count = var.needVPC && var.needNAS ? 1 : 0
          name  = local.default_name
          type  = "Vpc"
        }

        resource "alicloud_nas_mount_target" "nas_mt" {
          count             = var.needVPC && var.needNAS ? 1 : 0
          file_system_id    = alicloud_nas_file_system.nas_fs.0.id
          access_group_name = alicloud_nas_access_group.nas_ag.0.name
          vswitch_id        = alicloud_vswitch.vsw.0.id
          security_group_id = alicloud_security_group.sg.0.id
        }

        variable "needVPC" {
          default = false
          type    = bool
        }

        variable "namePrefix" {
          default = "serverless-application"
          type    = string
        }

        variable "needSLS" {
          default = false
          type    = bool
        }

        variable "needOSS" {
          default = false
          type    = bool
        }

        variable "needNAS" {
          default = false
          type    = bool
        }


        output "vpcId" {
          value = var.needVPC ? alicloud_vpc.vpc.0.id : null
        }

        output "vswitchIds" {
          value = var.needVPC ? [alicloud_vswitch.vsw.0.id] : null
        }

        output "securityGroupId" {
          value = var.needVPC ? alicloud_security_group.sg.0.id : null
        }

        output "nasMountTargetDomain" {
          value = var.needVPC && var.needNAS ? replace(alicloud_nas_mount_target.nas_mt.0.id, "${alicloud_nas_file_system.nas_fs.0.id}:", "") : null
        }

        output "slsProject" {
          value = var.needSLS ? alicloud_log_project.project.0.name : null
        }

        output "slsLogStore" {
          value = var.needSLS ? alicloud_log_store.store.0.name : null
        }

        output "ossBucketName" {
          value = var.needOSS ? alicloud_oss_bucket.bucket.0.bucket : null
        }

        output "ossExtranetEndpoint" {
          value = var.needOSS ? alicloud_oss_bucket.bucket.0.extranet_endpoint : null
        }

        output "ossIntranetEndpoint" {
          value = var.needOSS ? alicloud_oss_bucket.bucket.0.intranet_endpoint : null
        }

  # 可选：环境公共以及差异化配置，覆盖s.yaml中resources.xxx.props 的属性
  overlays: 
    global: # 全局替换
      # $target代表s.yaml中执行的resource
      # $this代表当前环境
      functionName: ${target.functionName}-${project}-${this.name} # s.yaml中的functionName加上project以及环境名作为后缀
      role: ${this.role} #引用环境role
      vpcConfig: # 使用环境创建的vpc
        vpcId: ${this.outputs.vpcId}
        securityGroupId: ${this.outputs.securityGroupId}      
        vswitchIds: ${this.outputs.vswitchIds}
      slsConfig: # 使用环境创建的sls
        project: ${this.outputs.slsProject}
        logstore: ${this.outputs.slsLogStore}
      nasConfig: # 使用环境创建的nas
        userId: 10003
        groupId: 10003
        mountPoints:
        - serverAddr: ${this.outputs.nasMountTargetDomain}
          nasDir: /remoteDir
          fcDir: /mnt/localDir
    
    resources: #指定resource进行局部替换
      api_1:
        timeout: 60
        memorySize: 128
        instanceConcurrency: 1
      api_2:
        timeout: 60
        memorySize: 128
        instanceConcurrency: 1
        environmentVariables:
          OSS_BUCKET: ${this.outputs.ossBucketName}
          OSS_ENDPOINT: ${this.outputs.ossIntranetEndpoint}

- name: prod
  access: prod
  description: 'production environment'
  type: 'production' # 生产环境
  region: cn-beijing
  role: acs:ram::${config(AccountID)}:role/serverlessdevsinfra-prod

  overlays:
    global: # 全局替换
      functionName: ${target.functionName}-${project}-${this.name} # s.yaml中的functionName加上project以及环境名作为后缀
      role: ${this.role} #引用环境role
      vpcConfig: # 直接指定网络配置
        vpcId: vpc-xxxx
        securityGroupId: sg-xxxxx 
        vswitchIds: vsw-xxxxx
      slsConfig: # 指定sls，不通过环境创建资源
        project: sls-project-prod
        logstore: logstore
    
    resources: #指定resource替换
      resources:
        api_1:
          timeout: 600
          memorySize: 1024
          instanceConcurrency: 10
        api_2:
          timeout: 600
          memorySize: 1024
          instanceConcurrency: 10
   
